// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model client {
  uid        String    @id @unique
  name       String    @unique
  created_at Int
  updated_at Int
  xendit_key String?
  ipaymu_key String?
  invoice    invoice[]
  app        app[]
}

model app {
  id        Int    @id @default(autoincrement())
  name      String @unique
  client_id String

  client client @relation(fields: [client_id], references: [uid], onDelete: Cascade)
}

model invoice {
  unique_id      String          @id @unique
  invoice_id     String          @unique
  merchant_name  String
  client_id      String
  customer_name  String
  store_name     String
  status         payment_status?
  // total_shopping       BigInt?
  total_bill     BigInt?
  // payment_fee          Int?
  payment_method String?
  payment_code   String?
  // description    String?         @db.Text
  paid_at        Int?
  // shipping_information String?         @db.Text
  expiry_date    Int?
  // shipping_cost        Int
  created        Int
  updated        Int

  client client @relation(fields: [client_id], references: [uid], onDelete: Cascade)
}

// model invoice_items {
//   id          Int     @id @default(autoincrement())
//   invoice_id  String
//   name        String
//   category    String?
//   quantity    Int
//   unit_price  Int
//   total_price Int
//   weight      String

//   invoice invoice @relation(fields: [invoice_id], references: [invoice_id], onDelete: Cascade)
// }

enum payment_status {
  unpaid
  pending
  paid
  expired
  refunded
  failed
}
